on:
  pull_request:
  release:
    types:
      - published

name: Build

jobs:
  # Mostly taken from https://github.com/etesync/etebase-py/blob/ee7bf21e9f57f0ce37f08d1f5cefd8ef0d3bb2f7/.github/workflows/manual.yml
  # and https://github.com/Daggy1234/polaroid/blob/ace9a6eee74ee9c30edd0d350d65e2f3b4d8430c/.github/workflows/publish.yml
  # See pyproject.toml for configuration.
  python-build-wheels:
    name: Python wheels (${{ matrix.os }}, ${{ matrix.vers }})
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        include:  # https://cibuildwheel.readthedocs.io/en/stable/options/#archs

          # - vers: aarch64
          #   os: ubuntu-20.04
          - vers: x86_64
            os: ubuntu-22.04

          - vers: arm64
            os: macos-15
          - vers: x86_64
            os: macos-15
          - vers: universal2
            os: macos-15

          - vers: AMD64
            os: windows-2022
      
    steps:
      - uses: actions/checkout@v5

      - uses: actions/setup-python@v5
        name: Install Python
        with:
          python-version: '3.11'

      # QEMU emulates an arm64 system on X86. This is needed to build the aarch64 wheels
      # on GH actions. It's slow. See
      # https://github.com/docker/setup-qemu-action/issues/22 and
      # https://github.com/pypa/cibuildwheel/issues/598
      - name: Set up QEMU
        if: runner.os == 'Linux'
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64

      - name: Install darwin target for apple silicon
        if: matrix.vers == 'universal2'
        run: rustup target add aarch64-apple-darwin

      # https://github.com/pypa/cibuildwheel/issues/563#issuecomment-2257729524
      - name: Set macOS deployment target
        if: matrix.os == 'macos-15'
        run: echo "MACOSX_DEPLOYMENT_TARGET=$(sw_vers -productVersion | cut -d '.' -f 1-2)" >> $GITHUB_ENV
  
      - name: Setup env when not using docker
        if: runner.os != 'Linux'
        run: |
          python -m pip install --upgrade wheel setuptools setuptools-rust
      
      - name: Install cibuildwheel
        run: |
          pip install cibuildwheel
      - name: Build wheels
        run: |
          python -m cibuildwheel biosphere-py --archs native --output-dir wheelhouse
      - uses: actions/upload-artifact@v4
        with:
          path: ./wheelhouse/*.whl
          name: wheels-${{ matrix.os }}-${{ matrix.vers }}

  python-build-sdist:
    name: Python sdist
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5

      - uses: actions/setup-python@v5
        name: Install Python
        with:
          python-version: '3.11'

      - name: Install build dependencies
        run: python -m pip install numpy maturin
      - name: Build sdist
        run: maturin sdist -m biosphere-py/Cargo.toml

      - uses: actions/upload-artifact@v4
        with:
          name: wheels-sdist
          path: biosphere-py/target/wheels/*.tar.gz

  upload-testpypi:
    needs: [python-build-wheels, python-build-sdist]
    runs-on: ubuntu-latest
    if: github.event_name == 'release' && github.event.action == 'published'
    environment:
      name: test_release
      url: https://test.pypi.org/p/biosphere
    permissions:
      id-token: write
    steps:
      - uses: actions/download-artifact@v5
        with:
          pattern: wheels-*
          path: dist

      - name: Flatten dist/ folder
        run: |
          find dist -type f -exec mv {} dist/ \;
          find dist -mindepth 1 -type d -empty -delete

      - uses: pypa/gh-action-pypi-publish@ed0c53931b1dc9bd32cbe73a98c7f6766f8a527e
        with:
          repository_url: https://test.pypi.org/legacy/
  
  upload-pypi:
    needs: [python-build-wheels, python-build-sdist, upload-testpypi]
    runs-on: ubuntu-latest
    if: github.event_name == 'release' && github.event.action == 'published'
    environment:
      name: release
      url: https://pypi.org/p/biosphere
    permissions:
      id-token: write
    steps:
      - uses: actions/download-artifact@v5
        with:
          pattern: wheels-*
          path: dist
        
      - name: Flatten dist/ folder
        run: |
          find dist -type f -exec mv {} dist/ \;
          find dist -mindepth 1 -type d -empty -delete

      - uses: pypa/gh-action-pypi-publish@ed0c53931b1dc9bd32cbe73a98c7f6766f8a527e

  release-crates-io:
    runs-on: ubuntu-latest
    if: github.event_name == 'release' && github.event.action == 'published'
    steps:
      - uses: actions/checkout@v5
      - run: cargo login ${CRATES_IO_TOKEN}
        env:
          CRATES_IO_TOKEN: ${{ secrets.CRATES_IO_TOKEN }}
      - run: cargo publish
